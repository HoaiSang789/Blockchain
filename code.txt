
Cài đặt môi trường và xây dựng hệ thống mạng fabric-samples
Cập nhật source.list
1.	Truy cập gg: tải source.list ubuntu 22.04
deb http://archive.ubuntu.com/ubuntu/ jammy main restricted universe multiverse
# deb-src http://archive.ubuntu.com/ubuntu/ jammy main restricted universe multiverse


deb http://archive.ubuntu.com/ubuntu/ jammy-updates main restricted universe multiverse
# deb-src http://archive.ubuntu.com/ubuntu/ jammy-updates main restricted universe multiverse


deb http://archive.ubuntu.com/ubuntu/ jammy-security main restricted universe multiverse
# deb-src http://archive.ubuntu.com/ubuntu/ jammy-security main restricted universe multiverse


deb http://archive.ubuntu.com/ubuntu/ jammy-backports main restricted universe multiverse
# deb-src http://archive.ubuntu.com/ubuntu/ jammy-backports main restricted universe multiverse


deb http://archive.canonical.com/ubuntu/ jammy partner
# deb-src http://archive.canonical.com/ubuntu/ jammy partner

sudo nano /etc/apt/sources.list
sudo apt update
Uninstall: 
sudo apt-get purge nodejs &&\ 
rm -r /etc/apt/sources.list.d/nodesource.list &&\ 
rm -r /etc/apt/keyrings/nodesource.gpg
sudo apt-get remove --purge nodejs libnode-dev 
sudo apt-get autoremove 
sudo apt-get clean 
2.	Install: 
sudo apt update 
sudo apt upgrade 
sudo apt install -y curl 
curl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash -
sudo apt install -y nodejs

sudo apt-get update 
sudo apt-get install git -y 
sudo apt-get install docker-compose -y
sudo systemctl start docker 
sudo systemctl enable docker 
sudo apt install jq -y

3.	Tải gói cài đặt Fabric Sample: 2.5.0 1.5.6 
curl -sSL https://bit.ly/2ysbOFE | bash -s -- 2.5.0 1.5.6 
4.	Thêm quyền người dùng vào group 
sudo usermod -aG docker ${USER}
reboot 
docker run hello-world

5.	Cài đặt gói npm 
sudo apt-get update 
sudo npm install npm@6.14.17 -g 
6.	Tải và cài đặt ngôn ngữ GO 
Kiểm tra và gỡ các phiên bản cũ nếu đã cài đặt:
 sudo rm -rf /usr/local/go 
Truy cập: https://go.dev/dl/ 
Tải bản 1.23.2 cài đặt của go về máy
Chép vào thư mục /usr/local/ 
sudo tar -C /usr/local -xzf go1.23.2.linux-amd64.tar.gz
7.	Cập nhật biến môi trường vào thư mục go 
sudo nano ~/.bashrc
export PATH=$PATH:/home/ubuntu/.local/bin 
export GOROOT=/usr/local/go 
export PATH=$GOROOT/bin:$PATH 

export FABRIC_CFG_PATH=$HOME/fabric-samples/config/ 
export CORE_PEER_LOCALMSPID="Org1MSP" 
export CORE_PEER_MSPCONFIGPATH=$HOME/fabric-samples/test-network/organizations/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp 

export CORE_PEER_ADDRESS=localhost:7051
export CORE_PEER_TLS_ROOTCERT_FILE=$HOME/fabric-samples/test-network/organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt 
export CORE_PEER_TLS_ENABLED=true

8.	Khởi động mạng Fabric và triển khai hợp đồng thông minh 
Remove tất cả các tài nguyên đã có để tạo các tài nguyên mới (tránh 2 ứng dụng khác nhau cùng chia sẻ cùng một tài nguyên) 
cd fabric-samples/test-network
./network.sh down
9.	Chạy script network.sh để khởi tạo và chạy mạng Fabric cho ứng dụng:
./network.sh up createChannel -ca -s couchdb
10.	Sau khi mạng đã khởi động, bạn có thể triển khai hợp đồng thông minh ( chaincode ) cho asset-transfer-basic: 
./network.sh deployCC -ccn basic -ccp /home/ubuntu/fabric-samples/asset-transfer-basic/chaincode-go -ccl go
11.	Chạy lệnh này để app.js bên dưới không bị lỗi 
cd ~/fabric-samples/asset-transfer-basic/application-gateway-javascript/src
npm install @grpc/grpc-js 
npm install @hyperledger/fabric-gateway 
12.	Chạy lệnh tạo tài sản mới trên thư mục asset-transfer-basic 
fit@fit-virtual-machine:~/fabric-samples/asset-transfer-basic/application-gat eway-javascript/src$ node app.js

13.	Cài đặt peer để thực hiện thao tác trên network 
npm install --save-dev --ignore-scripts install-peers 
#Thêm peer vào bashrc. Nếu gặp lỗi
cd ~/fabric-samples/bin 
export PATH=$PATH:$PWD

14.	Thêm tài sản: 
Cần xác định có bao nhiêu tổ chức xác nhận trên hệ thống hiện tại: 
peer lifecycle chaincode querycommitted --channelID mychannel --name basic 
15.	Ở đây cần 2 tổ chức chấp nhận để có thể thêm 1 tài sản mới
peer chaincode invoke -o 127.0.0.1:7050 --ordererTLSHostnameOverride orderer.example.com --tls --cafile /home/ubuntu/fabric-samples/test-network/organizations/ordererOrganizations/example.com/msp/tlscacerts/tlsca.example.com-cert.pem -C mychannel -n basic --peerAddresses localhost:7051 --tlsRootCertFiles /home/ubuntu/fabric-samples/test-network/organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt --peerAddresses localhost:9051 --tlsRootCertFiles /home/ubuntu/fabric-samples/test-network/organizations/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt -c '{"Args":["CreateAsset","asset20","green","8","Sang","300"]}'

16.	Kiểm tra tài sản vừa thêm: 
peer chaincode query -C mychannel -n basic -c '{"Args":["ReadAsset","asset20"]}'

CHAINCODE
Trong thư mục fabric-sample tạo thư mục mychaincode
 mkdir -p fabric-samples/chaincode/mychaincode 
cd fabric-samples
Tạo file mychaincode.go trong thư mục fabric-samples/chaincode/mychaincode/ với nội dung sau:

………………………………………………………………………………………………….
package main

import (
    "fmt"
    "github.com/hyperledger/fabric-contract-api-go/contractapi"
)

// SmartContract định nghĩa cấu trúc chaincode
type SmartContract struct {
    contractapi.Contract
}

// InitLedger khởi tạo ledger với dữ liệu mẫu
func (s *SmartContract) InitLedger(ctx contractapi.TransactionContextInterface) error {
    sampleData := map[string]string{
        "asset1": "value1",
        "asset2": "value2",
        "asset3": "value3",
    }

    for key, value := range sampleData {
        err := ctx.GetStub().PutState(key, []byte(value))
        if err != nil {
            return fmt.Errorf("Lỗi khởi tạo ledger: %s", err.Error())
        }
    }
    return nil
}

// Set thêm một cặp key-value vào ledger
func (s *SmartContract) Set(ctx contractapi.TransactionContextInterface, key string, value string) error {
    if key == "" || value == "" {
        return fmt.Errorf("Key và value không được để trống")
    }
    return ctx.GetStub().PutState(key, []byte(value))
}

// Get lấy giá trị của một key từ ledger
func (s *SmartContract) Get(ctx contractapi.TransactionContextInterface, key string) (string, error) {
    value, err := ctx.GetStub().GetState(key)
    if err != nil {
        return "", fmt.Errorf("Không thể lấy dữ liệu: %s", err.Error())
    }
    if value == nil {
        return "", fmt.Errorf("Key không tồn tại")
    }
    return string(value), nil
}

// Update cập nhật giá trị mới cho một key có sẵn
func (s *SmartContract) Update(ctx contractapi.TransactionContextInterface, key string, newValue string) error {
    exists, err := s.AssetExists(ctx, key)
    if err != nil {
        return err
    }
    if !exists {
        return fmt.Errorf("Không thể cập nhật: Key %s không tồn tại", key)
    }
    return ctx.GetStub().PutState(key, []byte(newValue))
}

// Delete xóa một key khỏi ledger
func (s *SmartContract) Delete(ctx contractapi.TransactionContextInterface, key string) error {
    if key == "" {
        return fmt.Errorf("Key không được để trống")
    }
    exists, err := s.AssetExists(ctx, key)
    if err != nil {
        return err
    }
    if !exists {
        return fmt.Errorf("Không thể xóa: Key %s không tồn tại", key)
    }
    return ctx.GetStub().DelState(key)
}

// AssetExists kiểm tra xem key có tồn tại trong ledger hay không
func (s *SmartContract) AssetExists(ctx contractapi.TransactionContextInterface, key string) (bool, error) {
    data, err := ctx.GetStub().GetState(key)
    if err != nil {
        return false, fmt.Errorf("Không thể kiểm tra key: %s", err.Error())
    }
    return data != nil, nil
}

// Hàm main để khởi động chaincode
func main() {
    chaincode, err := contractapi.NewChaincode(new(SmartContract))
    if err != nil {
        fmt.Printf("Lỗi tạo chaincode: %s", err.Error())
        return
    }

    if err := chaincode.Start(); err != nil {
        fmt.Printf("Lỗi khởi động chaincode: %s", err.Error())
    }
}

………………………………………………………………………………………………..

Di chuyển vào thư mục mychaincode tạo module
 go mod init mychaincode 
Chạy lệnh sau để tải và quản lý các dependencies cho dự án của bạn: 
go mod tidy

Đóng gói chaincode 
Sau khi đã khởi tạo go.mod và tải tất cả các dependencies, quay lại thư mục testnetwork và thử lại quá trình đóng gói chaincode. 
Lệnh này sẽ tạo file mychaincode.tar.gz cho chaincode của bạn.
 peer lifecycle chaincode package mychaincode.tar.gz --path ../chaincode/mychaincode --lang golang --label mychaincode_1.0

 Tiếp theo, cài đặt chaincode lên peer như trước đây: 
./network.sh up createChannel -c mychannel -ca 
peer lifecycle chaincode install mychaincode.tar.gz 


Deploy chaincode 
./network.sh deployCC -ccn mychaincode -ccp ../chaincode/mychaincode -ccl go

Gọi chaincode đã triển khai Lưu ý: chắc chắn rằng dữ liệu được đồng bộ tới tất cả các peer.)
//// Lệnh Thêm Dữ Liệu
peer chaincode invoke \
  -o 127.0.0.1:7050 \
  --ordererTLSHostnameOverride orderer.example.com \
  --tls \
  --cafile /home/ubuntu/fabric-samples/test-network/organizations/ordererOrganizations/example.com/msp/tlscacerts/tlsca.example.com-cert.pem \
  -C mychannel \
  -n mychaincode \
  --peerAddresses localhost:7051 \
  --tlsRootCertFiles /home/ubuntu/fabric-samples/test-network/organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt \
  --peerAddresses localhost:9051 \
  --tlsRootCertFiles /home/ubuntu/fabric-samples/test-network/organizations/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt \
  -c '{"Args":["Set","key1","value2"]}'


//// Lệnh kiểm tra dữ liệu đã tạo 
Lấy giá trị của key, value 
peer chaincode query -C mychannel -n mychaincode -c '{"Args":["Get","key 1"]}'













///// Lệnh CẬP NHẬT dữ liệu
peer chaincode invoke \
  -o 127.0.0.1:7050 \
  --ordererTLSHostnameOverride orderer.example.com \
  --tls \
  --cafile /home/ubuntu/fabric-samples/test-network/organizations/ordererOrganizations/example.com/msp/tlscacerts/tlsca.example.com-cert.pem \
  -C mychannel \
  -n mychaincode \
  --peerAddresses localhost:7051 \
  --tlsRootCertFiles /home/ubuntu/fabric-samples/test-network/organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt \
  --peerAddresses localhost:9051 \
  --tlsRootCertFiles /home/ubuntu/fabric-samples/test-network/organizations/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt \
  -c '{"Args":["Update","key1","new_value1"]}'




/// Lệnh XÓA dữ liệu
peer chaincode invoke \
  -o 127.0.0.1:7050 \
  --ordererTLSHostnameOverride orderer.example.com \
  --tls \
  --cafile /home/ubuntu/fabric-samples/test-network/organizations/ordererOrganizations/example.com/msp/tlscacerts/tlsca.example.com-cert.pem \
  -C mychannel \
  -n mychaincode \
  --peerAddresses localhost:7051 \
  --tlsRootCertFiles /home/ubuntu/fabric-samples/test-network/organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt \
  --peerAddresses localhost:9051 \
  --tlsRootCertFiles /home/ubuntu/fabric-samples/test-network/organizations/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt \
  -c '{"Args":["Delete","key1"]}'


Sử dụng lệnh peer channel fetch để xem block
peer channel fetch newest ./newest_block.block -o 127.0.0.1:7050 --ordererTLSHostnameOverride orderer.example.com --tls --cafile /home/ubuntu/fabric-samples/test-network/organizations/ordererOrganizations/example.com/msp/tlscacerts/tlsca.example.com-cert.pem -c mychannel

Dùng lệnh configtxlator để giải mã block 
configtxlator proto_decode --input newest_block.block --type common.Block --output newest_block.json 


Xem thông tin giao dịch: cat newest_block.json


……………………………………………………………………………………………….
package main

import (
	"encoding/json"
	"fmt"
	"os"

	"github.com/hyperledger/fabric-contract-api-go/contractapi"
)

type SmartContract struct{ contractapi.Contract }

type Student struct {
	MaHP, MSSV, HoTen string
	DiemHP            float64
}

// --- Thêm sinh viên ---
func (s *SmartContract) AddStudent(ctx contractapi.TransactionContextInterface, maHP, mssv, hoTen string, diem float64) error {
	if exist, _ := s.StudentExists(ctx, mssv); exist {
		return fmt.Errorf("MSSV %s đã tồn tại", mssv)
	}
	stu := Student{maHP, mssv, hoTen, diem}
	data, _ := json.Marshal(stu)
	if err := ctx.GetStub().PutState(mssv, data); err != nil {
		return err
	}
	return os.WriteFile(fmt.Sprintf("%s.json", mssv), data, 0644)
}

// --- Lấy sinh viên ---
func (s *SmartContract) GetStudent(ctx contractapi.TransactionContextInterface, mssv string) (*Student, error) {
	data, err := ctx.GetStub().GetState(mssv)
	if err != nil || data == nil {
		return nil, fmt.Errorf("Không tìm thấy MSSV: %s", mssv)
	}
	var stu Student
	_ = json.Unmarshal(data, &stu)
	return &stu, nil
}

// --- Cập nhật điểm ---
func (s *SmartContract) UpdateStudent(ctx contractapi.TransactionContextInterface, mssv string, diemMoi float64) error {
	stu, err := s.GetStudent(ctx, mssv)
	if err != nil {
		return err
	}
	stu.DiemHP = diemMoi
	data, _ := json.Marshal(stu)
	return ctx.GetStub().PutState(mssv, data)
}

// --- Xóa sinh viên ---
func (s *SmartContract) DeleteStudent(ctx contractapi.TransactionContextInterface, mssv string) error {
	exist, _ := s.StudentExists(ctx, mssv)
	if !exist {
		return fmt.Errorf("MSSV %s không tồn tại", mssv)
	}
	return ctx.GetStub().DelState(mssv)
}

// --- Kiểm tra tồn tại ---
func (s *SmartContract) StudentExists(ctx contractapi.TransactionContextInterface, mssv string) (bool, error) {
	data, err := ctx.GetStub().GetState(mssv)
	return data != nil, err
}

// --- Khởi tạo mẫu ---
func (s *SmartContract) InitLedger(ctx contractapi.TransactionContextInterface) error {
	return s.AddStudent(ctx, "TH1383", "21001234", "Cao Van Lun", 8.5)
}

// --- Hàm main ---
func main() {
	cc, err := contractapi.NewChaincode(new(SmartContract))
	if err != nil {
		fmt.Println("Lỗi tạo chaincode:", err)
		return
	}
	if err := cc.Start(); err != nil {
		fmt.Println("Lỗi khởi động chaincode:", err)
	}
}
………………………………………………………………………………………………..


Cài đặt ganache
Bước 1. Cài các thư viện cần cho AppImage:
sudo apt install -y libfuse2 wget
Bước 2. Vào Ganache release trên GitHub → tải file .AppImage mới nhất, ví dụ 2.7.1:
wget https://github.com/trufflesuite/ganache-ui/releases/download/v2.7.1/ganache-2.7.1-linux-x86_64.AppImage
Bước 3: Cấp quyền chạy & khởi động
chmod +x ganache-2.7.1-linux-x86_64.AppImage
./ganache-2.7.1-linux-x86_64.AppImage
sudo mv ganache-2.7.1-linux-x86_64.AppImage /usr/local/bin/ganache
ganache


sudo apt install -y curl 
curl -fsSL https://deb.nodesource.com/setup_22.x | sudo -E bash -
sudo apt install -y nodejs




Cài đặt Google Chrom
wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
sudo apt install ./google-chrome-stable_current_amd64.deb

Cài đặt Metamask
Mở Chrome → vào MetaMask trên Chrome Web Store.
Cài đặt Hardhat
Khi cài xong đảm bảo có hardhat.config.js, contracts/Voting.sol, contracts/deployVoting.js

 
Cài đặt hệ thống quản lý phiên bản
sudo apt install git -y










Tạo nhanh file package.json mặc định cho một dự án Node.j
npx npm init -y

Cài Hardhat vào dự án hiện tại, và lưu vào mục phát triển (devDependencies) trong package.json.
npx npm install --save-dev hardhat

Tạo dự án Hardhat
npx hardhat --init

 

npm install --save-dev @nomicfoundation/hardhat-toolbox-viem






require("@nomicfoundation/hardhat-toolbox");

module.exports = {
  solidity: "0.8.28",
  networks: {
    ganache: {
      url: "http://127.0.0.1:7545", // URL Ganache
      accounts: [
        "0x6fad1c814342a4922076730e44df7da53be606b208821a6a49cd8609739901c0"
      ], // Private key của account Ganache
    },
  },
};

// SPDX-License-Identifier: MIT
pragma solidity ^0.8.28;

contract Voting {
    string[] public candidatesList;
    mapping(string => uint) public votesReceived;
    mapping(address => bool) public hasVoted; // ✅ Lưu trạng thái đã bỏ phiếu

    address public manager;

    constructor(string[] memory candidatesName) {
        manager = msg.sender;
        candidatesList = candidatesName;
    }

    // ✅ Kiểm tra ứng viên hợp lệ
    function validCandidate(string memory candidate) public view returns (bool) {
        for (uint i = 0; i < candidatesList.length; i++) {
            if (
                keccak256(abi.encodePacked(candidate)) ==
                keccak256(abi.encodePacked(candidatesList[i]))
            ) {
                return true;
            }
        }
        return false;
    }

    // ✅ Bỏ phiếu - chỉ được 1 lần
    function voteCandidate(string memory candidate) public {
        require(validCandidate(candidate), "Ung vien khong hop le");
        require(!hasVoted[msg.sender], "Ban da bo phieu roi!"); // ✅ Chặn vote lại

        votesReceived[candidate]++;   // Tăng phiếu cho ứng viên
        hasVoted[msg.sender] = true;  // Đánh dấu đã bỏ phiếu
    }

    // ✅ Lấy danh sách tất cả ứng viên
    function getAllCandidates() public view returns (string[] memory) {
        return candidatesList;
    }

    // ✅ Lấy tổng phiếu của một ứng viên (optional)
    function getVotes(string memory candidate) public view returns (uint) {
        return votesReceived[candidate];
    }
}






async function main() {
    const Voting = await ethers.getContractFactory("Voting");
    const voting = await Voting.deploy(["Vo Hoai Sang", "Bui Thanh Kien", "Nguyen Anh Xuan"]);
    await voting.waitForDeployment();

    console.log("Dia Chi Voting:", voting.target);
}

main()
    .then(() => process.exit(0))
    .catch((error) => {
        console.log(error);
        process.exit(1);
})
npx hardhat run scripts/deployVoting.js –network ganache

………………………………………………………………………………………………………………………………………………………
<!DOCTYPE html>
<html lang="vi">
<head>
<meta charset="UTF-8">
<title>Voting DApp</title>
<style>
body {
  font-family: "Segoe UI", Arial, sans-serif;
  background: linear-gradient(135deg, #0f2027, #203a43, #2c5364);
  background-attachment: fixed;
  color: #fff;
  text-align: center;
  overflow-x: hidden;
  margin: 0;
  padding: 0;
  animation: bgMove 15s ease-in-out infinite alternate;
}
@keyframes bgMove {
  from { background-position: 0 0; }
  to { background-position: 100% 100%; }
}
h1 {
  color: #00e0ff;
  margin-top: 20px;
  text-shadow: 0 0 10px #00e0ff;
}
#account {
  margin-bottom: 5px;
  color: #aaa;
}
#status {
  margin-bottom: 20px;
  font-style: italic;
  color: #0ff;
  min-height: 20px;
}
#candidates {
  display: flex;
  flex-wrap: wrap;
  justify-content: center;
  gap: 25px;
  margin: 20px auto;
  padding: 0 10px;
  max-width: 1000px;
}
.card {
  background: rgba(20, 20, 20, 0.9);
  border: 1px solid rgba(0,255,255,0.2);
  border-radius: 14px;
  padding: 15px;
  width: 230px;
  box-shadow: 0 0 15px rgba(0,255,255,0.15);
  transition: transform 0.3s ease, box-shadow 0.3s ease;
}
.card:hover {
  transform: translateY(-5px);
  box-shadow: 0 0 25px rgba(0,255,255,0.4);
}
.card img {
  width: 100%;
  height: 150px;
  border-radius: 10px;
  object-fit: cover;
  margin-bottom: 10px;
  border: 1px solid rgba(0,255,255,0.2);
}
button {
  padding: 8px 14px;
  border: none;
  background: #00e0ff;
  color: #000;
  border-radius: 6px;
  cursor: pointer;
  font-weight: bold;
  transition: all 0.2s ease;
}
button:hover {
  transform: scale(1.08);
  background: #04f3ff;
}
canvas {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  pointer-events: none;
  z-index: 9999;
}
</style>
</head>
<body>
<h1>Danh sách ứng viên</h1>
<div id="account"></div>
<div id="status"></div>
<div id="candidates"></div>
<canvas id="fireworks"></canvas>

<script src="https://cdn.jsdelivr.net/npm/ethers@6.15.0/dist/ethers.umd.min.js"></script>
<script>
(async function() {
  if (!window.ethereum) return alert("Cần MetaMask hoặc provider tương thích!");
  await window.ethereum.request({ method: "eth_requestAccounts" });

  const provider = new ethers.BrowserProvider(window.ethereum);
  const signer = await provider.getSigner();
  const account = await signer.getAddress();
  document.getElementById("account").innerText = "👤 Tài khoản: " + account;

  const statusEl = document.getElementById("status");

  const contractAddress = "0x7925976D89260E4E564CeE54A2843DBEB7BA7088";
  const contractABI = [
    { "inputs": [{ "internalType": "string[]", "name": "candidatesName", "type": "string[]" }], "stateMutability": "nonpayable", "type": "constructor" },
    { "inputs": [], "name": "getAllCandidates", "outputs": [{ "internalType": "string[]", "name": "", "type": "string[]" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "string", "name": "candidate", "type": "string" }], "name": "voteCandidate", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "string", "name": "candidate", "type": "string" }], "name": "votesReceived", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" }
  ];

  const contract = new ethers.Contract(contractAddress, contractABI, signer);
  const candidates = await contract.getAllCandidates();
  const container = document.getElementById("candidates");

  // 🧑‍💻 Ảnh đại diện riêng
  const candidateImages = {
    "Vo Hoai Sang": "image/1.jpg",
    "Bui Thanh Kien": "image/2.jpg",
    "Nguyen Anh Xuan": "image/3.jpg"
  };

  async function renderCandidates() {
    container.innerHTML = "";
    for (const name of candidates) {
      const votes = await contract.votesReceived(name);
      const card = document.createElement("div");
      card.className = "card";

      const img = document.createElement("img");
      img.src = candidateImages[name] || "https://i.imgur.com/8Z7gZME.jpg";

      const title = document.createElement("h3");
      title.innerText = name;

      const p = document.createElement("p");
      p.innerText = "Votes: " + votes;

      const btn = document.createElement("button");
      btn.innerText = "Vote";
      btn.onclick = async () => {
        try {
          const tx = await contract.voteCandidate(name);
          await tx.wait();
          statusEl.innerHTML = `✅ Bạn đã bỏ phiếu cho <b>${name}</b> thành công!`;
          showFireworks(async () => {
            const newVotes = await contract.votesReceived(name);
            p.innerText = "Votes: " + newVotes;
          });
        } catch (err) {
          const msg = err.info?.error?.message || err.message;
          if (msg.includes("revert")) {
            statusEl.innerHTML = `⚠️ Bạn đã bỏ phiếu rồi!`;
          } else {
            alert("Lỗi khi bỏ phiếu: " + msg);
          }
        }
      };

      card.append(img, title, p, btn);
      container.appendChild(card);
    }
  }

  await renderCandidates();

  // 🎆 Pháo hoa công nghệ
  const canvas = document.getElementById("fireworks");
  const ctx = canvas.getContext("2d");
  canvas.width = window.innerWidth;
  canvas.height = window.innerHeight;

  function launchBurst(cx, cy, delay = 0) {
    return new Promise(resolve => {
      setTimeout(() => {
        const particles = [];
        for (let i = 0; i < 120; i++) {
          particles.push({
            x: cx,
            y: cy,
            vx: (Math.random() - 0.5) * 12,
            vy: (Math.random() - 0.5) * 12,
            size: Math.random() * 3 + 1,
            alpha: 1,
            color: `hsl(${Math.random() * 360}, 100%, 60%)`
          });
        }

        let frame = 0;
        const animate = () => {
          frame++;
          ctx.fillStyle = "rgba(0,0,0,0.15)";
          ctx.fillRect(0, 0, canvas.width, canvas.height);
          particles.forEach(p => {
            p.x += p.vx;
            p.y += p.vy;
            p.alpha -= 0.005;
            p.size *= 0.97;
            ctx.globalAlpha = p.alpha;
            ctx.fillStyle = p.color;
            ctx.beginPath();
            ctx.arc(p.x, p.y, p.size, 0, Math.PI * 2);
            ctx.fill();
          });
          if (frame < 100) requestAnimationFrame(animate);
          else resolve();
        };
        animate();
      }, delay);
    });
  }

  async function showFireworks(onFinish) {
    const cx = canvas.width / 2;
    const cy = canvas.height / 2 + 100;
    await launchBurst(cx, cy, 0);
    await launchBurst(cx - 150, cy - 80, 100);
    await launchBurst(cx + 150, cy - 100, 100);
    ctx.clearRect(0, 0, canvas.width, canvas.height);
    if (onFinish) onFinish();
  }
})();
</script>
</body>
</html>
………………………………………………………………………………………………………………………………………………..








